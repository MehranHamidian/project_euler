//link of problem -> https://projecteuler.net/problem=2

//problem description
//Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
//1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...
//By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

fn main() {
    //first of all define variable to store sum of the even-valued terms
    let mut total: u32 = 0;

    //now define first and second number in sequence
    let mut first_number: u32 = 1;
    let mut second_number: u32 = 2;

    //make a loop for add two previous term and add even-valued terms to totla variable
    loop{
        //define a next nubmer
        let next_number: u32 = first_number + second_number;

        //check if next_number is even add it to total
        if next_number % 2 == 0{
            total += next_number;
        }

        //move loop as much as one next_number
        first_number = second_number;
        second_number = next_number;

        //check if next number grow up over 4 million, break the loop
        if next_number > 4_000_000 {
            break
        }
    }

    //add 2 to total number, because we started our loop by 1 and 2, and 2 is even
    total+=2;
    
    //finaly print the total nect_number
    println!("{}", total);

}
